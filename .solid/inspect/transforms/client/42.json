{
  "id": "/project/Tuxedo-Cupcakes/node_modules/.pnpm/vite@3.2.4_sass@1.56.1/node_modules/vite/dist/client/env.mjs",
  "deps": [],
  "plugins": [
    "__load__",
    "vite:client-inject",
    "vite:import-analysis"
  ],
  "transforms": [
    {
      "name": "__load__",
      "result": "const context = (() => {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    else if (typeof self !== 'undefined') {\n        return self;\n    }\n    else if (typeof window !== 'undefined') {\n        return window;\n    }\n    else {\n        return Function('return this')();\n    }\n})();\n// assign defines\nconst defines = __DEFINES__;\nObject.keys(defines).forEach((key) => {\n    const segments = key.split('.');\n    let target = context;\n    for (let i = 0; i < segments.length; i++) {\n        const segment = segments[i];\n        if (i === segments.length - 1) {\n            target[segment] = defines[key];\n        }\n        else {\n            target = target[segment] || (target[segment] = {});\n        }\n    }\n});\n                                \n",
      "start": 1669682800872,
      "end": 1669682800872
    },
    {
      "name": "vite:client-inject",
      "result": "const context = (() => {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    else if (typeof self !== 'undefined') {\n        return self;\n    }\n    else if (typeof window !== 'undefined') {\n        return window;\n    }\n    else {\n        return Function('return this')();\n    }\n})();\n// assign defines\nconst defines = {\"process.env.TEST_ENV\": undefined, \"process.env.NODE_ENV\": (\"development\"), \"import.meta.env.START_SSR\": (true), \"import.meta.env.START_ISLANDS\": (false), \"import.meta.env.START_ENTRY_CLIENT\": (\"/project/Tuxedo-Cupcakes/src/entry-client.tsx\"), \"import.meta.env.START_ENTRY_SERVER\": (\"/project/Tuxedo-Cupcakes/src/entry-server.tsx\"), \"import.meta.env.START_INDEX_HTML\": (false), \"import.meta.env.START_ISLANDS_ROUTER\": (false), \"DEBUG\": (globalThis.DEBUG), \"import.meta.env.START_ADAPTER\": (\"solid-start-vercel\"), };\nObject.keys(defines).forEach((key) => {\n    const segments = key.split('.');\n    let target = context;\n    for (let i = 0; i < segments.length; i++) {\n        const segment = segments[i];\n        if (i === segments.length - 1) {\n            target[segment] = defines[key];\n        }\n        else {\n            target = target[segment] || (target[segment] = {});\n        }\n    }\n});\n                                \n",
      "start": 1669682800872,
      "end": 1669682800872
    },
    {
      "name": "vite:import-analysis",
      "result": "const context = (() => {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    else if (typeof self !== 'undefined') {\n        return self;\n    }\n    else if (typeof window !== 'undefined') {\n        return window;\n    }\n    else {\n        return Function('return this')();\n    }\n})();\n// assign defines\nconst defines = {\"process.env.TEST_ENV\": undefined, \"process.env.NODE_ENV\": (\"development\"), \"import.meta.env.START_SSR\": (true), \"import.meta.env.START_ISLANDS\": (false), \"import.meta.env.START_ENTRY_CLIENT\": (\"/project/Tuxedo-Cupcakes/src/entry-client.tsx\"), \"import.meta.env.START_ENTRY_SERVER\": (\"/project/Tuxedo-Cupcakes/src/entry-server.tsx\"), \"import.meta.env.START_INDEX_HTML\": (false), \"import.meta.env.START_ISLANDS_ROUTER\": (false), \"DEBUG\": (globalThis.DEBUG), \"import.meta.env.START_ADAPTER\": (\"solid-start-vercel\"), };\nObject.keys(defines).forEach((key) => {\n    const segments = key.split('.');\n    let target = context;\n    for (let i = 0; i < segments.length; i++) {\n        const segment = segments[i];\n        if (i === segments.length - 1) {\n            target[segment] = defines[key];\n        }\n        else {\n            target = target[segment] || (target[segment] = {});\n        }\n    }\n});\n                                \n",
      "start": 1669682800872,
      "end": 1669682800872
    }
  ],
  "virtual": false
}