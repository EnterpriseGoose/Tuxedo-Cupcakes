{
  "id": "/project/Tuxedo-Cupcakes/src/routes/virtual-market.tsx",
  "deps": [],
  "plugins": [
    "__load__",
    "solid",
    "vite:import-analysis"
  ],
  "transforms": [
    {
      "name": "__load__",
      "result": "import { APIEvent } from 'solid-start/api';\r\nimport { redirect } from 'solid-start/server';\r\nimport { createSignal, For } from 'solid-js';\r\nimport Layout from '~/components/Layout';\r\nimport styles from './virtual-market.module.scss';\r\n\r\nexport default function Home() {\r\n  const [dates, setDates] = createSignal([[new Date(2022, 11), '???']]);\r\n  return (\r\n    <Layout>\r\n      <div class={styles.sections}>\r\n        <div class={`${styles.section} ${styles.one}`}>\r\n          <h2>Order Cupcakes from the Tuxedo Cupcakes Virtual Market</h2>\r\n          <p>\r\n            When it's not market season, I will do occasional virtual markets.\r\n            <br />\r\n            These markets are an opportunity to get cupcakes in smaller\r\n            quantites, similar to going to the farmers' market. Each virtual\r\n            market will have both the classics (Chocolate & Vanilla) as well as\r\n            a couple different special flavors\r\n            <br /> <br />\r\n            To participate in a virtual market, you have to place an order a few\r\n            days before the market day. On the market day, your order will be\r\n            delivered at some point in the afternoon.\r\n          </p>\r\n        </div>\r\n        <img src=\"/images/decorations/bow-divider.svg\" class={styles.divider} />\r\n        <div class={`${styles.section} ${styles.two}`}>\r\n          <h3>Next Virtual Market</h3>\r\n          <p>\r\n            The next virtual market will be a Holiday Virtual Market in December\r\n          </p>\r\n          <br />\r\n          <p>\r\n            The date is currently TBD. Sign up to get updates about when the\r\n            market will be and how you can order cupcakes:\r\n          </p>\r\n          <form\r\n            action=\"\"\r\n            method=\"post\"\r\n            class=\"form-example\"\r\n            onsubmit={() => {\r\n              return false;\r\n            }}\r\n          >\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              placeholder=\"Email\"\r\n              required\r\n            />{' '}\r\n            <input type=\"submit\" id=\"button\" value=\"Sign Up\" />\r\n          </form>\r\n        </div>\r\n        <img src=\"/images/decorations/bow-divider.svg\" class={styles.divider} />\r\n        <div class={`${styles.section} ${styles.three}`}>\r\n          <h3>Pricing</h3>\r\n          <p>\r\n            Cupcakes are priced by the size of box. A box can contain any mix of\r\n            cupcakes.\r\n          </p>\r\n          <h4>Regular Size Cupcakes:</h4>\r\n          <p>Box of 2 - $8</p>\r\n          <p>Box of 4 - $15</p>\r\n          <p>Box of 6 - $20</p>\r\n          <p>Box of 12 - $40</p>\r\n          <br />\r\n          <h4>Mini Cupcakes:</h4>\r\n          <p>Box of 6 - $10</p>\r\n          <p>Box of 12 - $20</p>\r\n          <br />\r\n          <p>\r\n            Delivery is free within Chatham and neighboring towns. There may be\r\n            an additional fee for delieveres far from Chatham. Contact me at{' '}\r\n            <a\r\n              href=\"mailto:oliver@tuxedocupcakes.com\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              oliver@tuxedocupcakes.com\r\n            </a>{' '}\r\n            with any questions\r\n          </p>\r\n        </div>\r\n        <img src=\"/images/decorations/bow-divider.svg\" class={styles.divider} />\r\n\r\n        <div class={`${styles.section} ${styles.four}`}>\r\n          <h3>Dates</h3>\r\n          <p class={styles.desc}>\r\n            Here are the dates that I'm currently planning a virtual market for.\r\n            Keep in mind, these dates are subject to change, as I will keep\r\n            adding dates as they get closer.\r\n          </p>\r\n          <ul>\r\n            <For each={dates()}>\r\n              {([date, specials], i) => (\r\n                <li\r\n                  class={(() => {\r\n                    let thisDate = (date as Date).setHours(0, 0, 0, 0);\r\n                    let lastDate = (\r\n                      dates()[i() - 1] != undefined\r\n                        ? (dates()[i() - 1][0] as Date)\r\n                        : new Date(0)\r\n                    ).getTime();\r\n                    if (new Date().setHours(0, 0, 0, 0) === thisDate)\r\n                      return styles.today;\r\n                    else if (\r\n                      new Date().setHours(0, 0, 0, 0) !== lastDate &&\r\n                      new Date().getTime() > lastDate &&\r\n                      new Date().getTime() < thisDate &&\r\n                      i() == dates().length - 1\r\n                    )\r\n                      return styles.finalWeek;\r\n                    else if (\r\n                      new Date().setHours(0, 0, 0, 0) !== lastDate &&\r\n                      new Date().getTime() > lastDate &&\r\n                      new Date().getTime() < thisDate\r\n                    )\r\n                      return styles.nextWeek;\r\n                    else return '';\r\n                  })()}\r\n                >{`${date.toString().substring(4, 7)} ${(\r\n                  date as Date\r\n                ).getDate()}${specials ? ` - ${specials}` : ''}`}</li>\r\n              )}\r\n            </For>\r\n          </ul>\r\n        </div>\r\n        <img src=\"/images/decorations/bow-divider.svg\" class={styles.divider} />\r\n        <div class={`${styles.section} ${styles.four}`}>\r\n          <h3>Contact me</h3>\r\n          <h4>\r\n            Contact me at\r\n            <br />\r\n            <a\r\n              href=\"mailto:oliver@tuxedocupcakes.com\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              oliver@tuxedocupcakes.com\r\n            </a>\r\n          </h4>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport async function POST({ request }: APIEvent) {\r\n  let formData = await request.formData();\r\n  let email = formData.get('email');\r\n  console.log(email);\r\n  const sgMail = require('@sendgrid/mail');\r\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\r\n  const msg = {\r\n    to: 'oliver@tuxedocupcakes.com', // Change to your recipient\r\n    from: 'oliver@tuxedocupcakes.com', // Change to your verified sender\r\n    subject: 'Sending with SendGrid is Fun',\r\n    text: 'and easy to do anywhere, even with Node.js',\r\n    html: '<strong>and easy to do anywhere, even with Node.js</strong>',\r\n  };\r\n  sgMail\r\n    .send(msg)\r\n    .then(() => {\r\n      console.log('Email sent');\r\n    })\r\n    .catch((error) => {\r\n      console.error(error);\r\n    });\r\n  return redirect('?sign-up=success');\r\n}\r\n",
      "start": 1668223187929,
      "end": 1668223187929
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { className as _$className } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { esm as _esm } from \"solid-refresh\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div><div><h2>Order Cupcakes from the Tuxedo Cupcakes Virtual Market</h2><p>When it's not market season, I will do occasional virtual markets.<br>These markets are an opportunity to get cupcakes in smaller quantites, similar to going to the farmers' market. Each virtual market will have both the classics (Chocolate & Vanilla) as well as a couple different special flavors<br> <br>To participate in a virtual market, you have to place an order a few days before the market day. On the market day, your order will be delivered at some point in the afternoon.</p></div><img src=\"/images/decorations/bow-divider.svg\"><div><h3>Next Virtual Market</h3><p>The next virtual market will be a Holiday Virtual Market in December</p><br><p>The date is currently TBD. Sign up to get updates about when the market will be and how you can order cupcakes:</p><form action=\"\" method=\"post\" class=\"form-example\"><input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" required> <input type=\"submit\" id=\"button\" value=\"Sign Up\"></form></div><img src=\"/images/decorations/bow-divider.svg\"><div><h3>Pricing</h3><p>Cupcakes are priced by the size of box. A box can contain any mix of cupcakes.</p><h4>Regular Size Cupcakes:</h4><p>Box of 2 - $8</p><p>Box of 4 - $15</p><p>Box of 6 - $20</p><p>Box of 12 - $40</p><br><h4>Mini Cupcakes:</h4><p>Box of 6 - $10</p><p>Box of 12 - $20</p><br><p>Delivery is free within Chatham and neighboring towns. There may be an additional fee for delieveres far from Chatham. Contact me at <a href=\"mailto:oliver@tuxedocupcakes.com\" target=\"_blank\" rel=\"noopener noreferrer\">oliver@tuxedocupcakes.com</a> with any questions</p></div><img src=\"/images/decorations/bow-divider.svg\"><div><h3>Dates</h3><p>Here are the dates that I'm currently planning a virtual market for. Keep in mind, these dates are subject to change, as I will keep adding dates as they get closer.</p><ul></ul></div><img src=\"/images/decorations/bow-divider.svg\"><div><h3>Contact me</h3><h4>Contact me at<br><a href=\"mailto:oliver@tuxedocupcakes.com\" target=\"_blank\" rel=\"noopener noreferrer\">oliver@tuxedocupcakes.com</a></h4></div></div>`, 73),\n  _tmpl$2 = /*#__PURE__*/_$template(`<li></li>`, 2);\nimport { redirect } from 'solid-start/server';\nimport { createSignal, For } from 'solid-js';\nimport Layout from '~/components/Layout';\nimport styles from './virtual-market.module.scss';\nexport const $$registrations = {};\nconst _Hot$$Home = function Home() {\n  const [dates, setDates] = createSignal([[new Date(2022, 11), '???']]);\n  return _$createComponent(Layout, {\n    get children() {\n      const _el$ = _$getNextElement(_tmpl$),\n        _el$2 = _el$.firstChild,\n        _el$3 = _el$2.nextSibling,\n        _el$4 = _el$3.nextSibling,\n        _el$5 = _el$4.firstChild,\n        _el$6 = _el$5.nextSibling,\n        _el$7 = _el$6.nextSibling,\n        _el$8 = _el$7.nextSibling,\n        _el$9 = _el$8.nextSibling,\n        _el$10 = _el$4.nextSibling,\n        _el$11 = _el$10.nextSibling,\n        _el$12 = _el$11.nextSibling,\n        _el$13 = _el$12.nextSibling,\n        _el$14 = _el$13.firstChild,\n        _el$15 = _el$14.nextSibling,\n        _el$16 = _el$15.nextSibling,\n        _el$17 = _el$13.nextSibling,\n        _el$18 = _el$17.nextSibling;\n      _el$9.addEventListener(\"submit\", () => {\n        return false;\n      });\n      _$insert(_el$16, _$createComponent(For, {\n        get each() {\n          return dates();\n        },\n        children: ([date, specials], i) => (() => {\n          const _el$19 = _$getNextElement(_tmpl$2);\n          _$insert(_el$19, () => `${date.toString().substring(4, 7)} ${date.getDate()}${specials ? ` - ${specials}` : ''}`);\n          _$effect(() => _$className(_el$19, (() => {\n            let thisDate = date.setHours(0, 0, 0, 0);\n            let lastDate = (dates()[i() - 1] != undefined ? dates()[i() - 1][0] : new Date(0)).getTime();\n            if (new Date().setHours(0, 0, 0, 0) === thisDate) return styles.today;else if (new Date().setHours(0, 0, 0, 0) !== lastDate && new Date().getTime() > lastDate && new Date().getTime() < thisDate && i() == dates().length - 1) return styles.finalWeek;else if (new Date().setHours(0, 0, 0, 0) !== lastDate && new Date().getTime() > lastDate && new Date().getTime() < thisDate) return styles.nextWeek;else return '';\n          })()));\n          return _el$19;\n        })()\n      }));\n      _$effect(_p$ => {\n        const _v$ = styles.sections,\n          _v$2 = `${styles.section} ${styles.one}`,\n          _v$3 = styles.divider,\n          _v$4 = `${styles.section} ${styles.two}`,\n          _v$5 = styles.divider,\n          _v$6 = `${styles.section} ${styles.three}`,\n          _v$7 = styles.divider,\n          _v$8 = `${styles.section} ${styles.four}`,\n          _v$9 = styles.desc,\n          _v$10 = styles.divider,\n          _v$11 = `${styles.section} ${styles.four}`;\n        _v$ !== _p$._v$ && _$className(_el$, _p$._v$ = _v$);\n        _v$2 !== _p$._v$2 && _$className(_el$2, _p$._v$2 = _v$2);\n        _v$3 !== _p$._v$3 && _$className(_el$3, _p$._v$3 = _v$3);\n        _v$4 !== _p$._v$4 && _$className(_el$4, _p$._v$4 = _v$4);\n        _v$5 !== _p$._v$5 && _$className(_el$10, _p$._v$5 = _v$5);\n        _v$6 !== _p$._v$6 && _$className(_el$11, _p$._v$6 = _v$6);\n        _v$7 !== _p$._v$7 && _$className(_el$12, _p$._v$7 = _v$7);\n        _v$8 !== _p$._v$8 && _$className(_el$13, _p$._v$8 = _v$8);\n        _v$9 !== _p$._v$9 && _$className(_el$15, _p$._v$9 = _v$9);\n        _v$10 !== _p$._v$10 && _$className(_el$17, _p$._v$10 = _v$10);\n        _v$11 !== _p$._v$11 && _$className(_el$18, _p$._v$11 = _v$11);\n        return _p$;\n      }, {\n        _v$: undefined,\n        _v$2: undefined,\n        _v$3: undefined,\n        _v$4: undefined,\n        _v$5: undefined,\n        _v$6: undefined,\n        _v$7: undefined,\n        _v$8: undefined,\n        _v$9: undefined,\n        _v$10: undefined,\n        _v$11: undefined\n      });\n      return _el$;\n    }\n  });\n};\n$$registrations._Hot$$Home = {\n  component: _Hot$$Home,\n  id: \"_Hot$$Home\"\n};\nconst {\n  handler: _handler,\n  Component: _Component\n} = _esm($$registrations._Hot$$Home, !!import.meta.hot);\nif (import.meta.hot) import.meta.hot.accept(_mod => {\n  _handler(_mod) && import.meta.hot.invalidate();\n});\nexport default _Component;\nexport async function POST({\n  request\n}) {\n  let formData = await request.formData();\n  let email = formData.get('email');\n  console.log(email);\n  const sgMail = require('@sendgrid/mail');\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n  const msg = {\n    to: 'oliver@tuxedocupcakes.com',\n    // Change to your recipient\n    from: 'oliver@tuxedocupcakes.com',\n    // Change to your verified sender\n    subject: 'Sending with SendGrid is Fun',\n    text: 'and easy to do anywhere, even with Node.js',\n    html: '<strong>and easy to do anywhere, even with Node.js</strong>'\n  };\n  sgMail.send(msg).then(() => {\n    console.log('Email sent');\n  }).catch(error => {\n    console.error(error);\n  });\n  return redirect('?sign-up=success');\n}",
      "start": 1668223187929,
      "end": 1668223188128
    },
    {
      "name": "vite:import-analysis",
      "result": "import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/routes/virtual-market.tsx\");import { template as _$template } from \"/node_modules/.vite/deps/solid-js_web.js?v=288f8a37\";\nimport { className as _$className } from \"/node_modules/.vite/deps/solid-js_web.js?v=288f8a37\";\nimport { effect as _$effect } from \"/node_modules/.vite/deps/solid-js_web.js?v=288f8a37\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=288f8a37\";\nimport { insert as _$insert } from \"/node_modules/.vite/deps/solid-js_web.js?v=288f8a37\";\nimport { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=288f8a37\";\nimport { esm as _esm } from \"/@solid-refresh\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div><div><h2>Order Cupcakes from the Tuxedo Cupcakes Virtual Market</h2><p>When it's not market season, I will do occasional virtual markets.<br>These markets are an opportunity to get cupcakes in smaller quantites, similar to going to the farmers' market. Each virtual market will have both the classics (Chocolate & Vanilla) as well as a couple different special flavors<br> <br>To participate in a virtual market, you have to place an order a few days before the market day. On the market day, your order will be delivered at some point in the afternoon.</p></div><img src=\"/images/decorations/bow-divider.svg\"><div><h3>Next Virtual Market</h3><p>The next virtual market will be a Holiday Virtual Market in December</p><br><p>The date is currently TBD. Sign up to get updates about when the market will be and how you can order cupcakes:</p><form action=\"\" method=\"post\" class=\"form-example\"><input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" required> <input type=\"submit\" id=\"button\" value=\"Sign Up\"></form></div><img src=\"/images/decorations/bow-divider.svg\"><div><h3>Pricing</h3><p>Cupcakes are priced by the size of box. A box can contain any mix of cupcakes.</p><h4>Regular Size Cupcakes:</h4><p>Box of 2 - $8</p><p>Box of 4 - $15</p><p>Box of 6 - $20</p><p>Box of 12 - $40</p><br><h4>Mini Cupcakes:</h4><p>Box of 6 - $10</p><p>Box of 12 - $20</p><br><p>Delivery is free within Chatham and neighboring towns. There may be an additional fee for delieveres far from Chatham. Contact me at <a href=\"mailto:oliver@tuxedocupcakes.com\" target=\"_blank\" rel=\"noopener noreferrer\">oliver@tuxedocupcakes.com</a> with any questions</p></div><img src=\"/images/decorations/bow-divider.svg\"><div><h3>Dates</h3><p>Here are the dates that I'm currently planning a virtual market for. Keep in mind, these dates are subject to change, as I will keep adding dates as they get closer.</p><ul></ul></div><img src=\"/images/decorations/bow-divider.svg\"><div><h3>Contact me</h3><h4>Contact me at<br><a href=\"mailto:oliver@tuxedocupcakes.com\" target=\"_blank\" rel=\"noopener noreferrer\">oliver@tuxedocupcakes.com</a></h4></div></div>`, 73),\n  _tmpl$2 = /*#__PURE__*/_$template(`<li></li>`, 2);\nimport { redirect } from '/node_modules/.pnpm/solid-start@0.2.5_3zrnixj5s2zo7r5ma456ac2ypm/node_modules/solid-start/server/browser.ts?v=9ac0fbdc';\nimport { createSignal, For } from '/node_modules/.vite/deps/solid-js.js?v=288f8a37';\nimport Layout from '/src/components/Layout/index.tsx';\nimport styles from '/src/routes/virtual-market.module.scss';\nexport const $$registrations = {};\nconst _Hot$$Home = function Home() {\n  const [dates, setDates] = createSignal([[new Date(2022, 11), '???']]);\n  return _$createComponent(Layout, {\n    get children() {\n      const _el$ = _$getNextElement(_tmpl$),\n        _el$2 = _el$.firstChild,\n        _el$3 = _el$2.nextSibling,\n        _el$4 = _el$3.nextSibling,\n        _el$5 = _el$4.firstChild,\n        _el$6 = _el$5.nextSibling,\n        _el$7 = _el$6.nextSibling,\n        _el$8 = _el$7.nextSibling,\n        _el$9 = _el$8.nextSibling,\n        _el$10 = _el$4.nextSibling,\n        _el$11 = _el$10.nextSibling,\n        _el$12 = _el$11.nextSibling,\n        _el$13 = _el$12.nextSibling,\n        _el$14 = _el$13.firstChild,\n        _el$15 = _el$14.nextSibling,\n        _el$16 = _el$15.nextSibling,\n        _el$17 = _el$13.nextSibling,\n        _el$18 = _el$17.nextSibling;\n      _el$9.addEventListener(\"submit\", () => {\n        return false;\n      });\n      _$insert(_el$16, _$createComponent(For, {\n        get each() {\n          return dates();\n        },\n        children: ([date, specials], i) => (() => {\n          const _el$19 = _$getNextElement(_tmpl$2);\n          _$insert(_el$19, () => `${date.toString().substring(4, 7)} ${date.getDate()}${specials ? ` - ${specials}` : ''}`);\n          _$effect(() => _$className(_el$19, (() => {\n            let thisDate = date.setHours(0, 0, 0, 0);\n            let lastDate = (dates()[i() - 1] != undefined ? dates()[i() - 1][0] : new Date(0)).getTime();\n            if (new Date().setHours(0, 0, 0, 0) === thisDate) return styles.today;else if (new Date().setHours(0, 0, 0, 0) !== lastDate && new Date().getTime() > lastDate && new Date().getTime() < thisDate && i() == dates().length - 1) return styles.finalWeek;else if (new Date().setHours(0, 0, 0, 0) !== lastDate && new Date().getTime() > lastDate && new Date().getTime() < thisDate) return styles.nextWeek;else return '';\n          })()));\n          return _el$19;\n        })()\n      }));\n      _$effect(_p$ => {\n        const _v$ = styles.sections,\n          _v$2 = `${styles.section} ${styles.one}`,\n          _v$3 = styles.divider,\n          _v$4 = `${styles.section} ${styles.two}`,\n          _v$5 = styles.divider,\n          _v$6 = `${styles.section} ${styles.three}`,\n          _v$7 = styles.divider,\n          _v$8 = `${styles.section} ${styles.four}`,\n          _v$9 = styles.desc,\n          _v$10 = styles.divider,\n          _v$11 = `${styles.section} ${styles.four}`;\n        _v$ !== _p$._v$ && _$className(_el$, _p$._v$ = _v$);\n        _v$2 !== _p$._v$2 && _$className(_el$2, _p$._v$2 = _v$2);\n        _v$3 !== _p$._v$3 && _$className(_el$3, _p$._v$3 = _v$3);\n        _v$4 !== _p$._v$4 && _$className(_el$4, _p$._v$4 = _v$4);\n        _v$5 !== _p$._v$5 && _$className(_el$10, _p$._v$5 = _v$5);\n        _v$6 !== _p$._v$6 && _$className(_el$11, _p$._v$6 = _v$6);\n        _v$7 !== _p$._v$7 && _$className(_el$12, _p$._v$7 = _v$7);\n        _v$8 !== _p$._v$8 && _$className(_el$13, _p$._v$8 = _v$8);\n        _v$9 !== _p$._v$9 && _$className(_el$15, _p$._v$9 = _v$9);\n        _v$10 !== _p$._v$10 && _$className(_el$17, _p$._v$10 = _v$10);\n        _v$11 !== _p$._v$11 && _$className(_el$18, _p$._v$11 = _v$11);\n        return _p$;\n      }, {\n        _v$: undefined,\n        _v$2: undefined,\n        _v$3: undefined,\n        _v$4: undefined,\n        _v$5: undefined,\n        _v$6: undefined,\n        _v$7: undefined,\n        _v$8: undefined,\n        _v$9: undefined,\n        _v$10: undefined,\n        _v$11: undefined\n      });\n      return _el$;\n    }\n  });\n};\n$$registrations._Hot$$Home = {\n  component: _Hot$$Home,\n  id: \"_Hot$$Home\"\n};\nconst {\n  handler: _handler,\n  Component: _Component\n} = _esm($$registrations._Hot$$Home, !!import.meta.hot);\nif (import.meta.hot) import.meta.hot.accept(_mod => {\n  _handler(_mod) && import.meta.hot.invalidate();\n});\nexport default _Component;\nexport async function POST({\n  request\n}) {\n  let formData = await request.formData();\n  let email = formData.get('email');\n  console.log(email);\n  const sgMail = require('@sendgrid/mail');\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n  const msg = {\n    to: 'oliver@tuxedocupcakes.com',\n    // Change to your recipient\n    from: 'oliver@tuxedocupcakes.com',\n    // Change to your verified sender\n    subject: 'Sending with SendGrid is Fun',\n    text: 'and easy to do anywhere, even with Node.js',\n    html: '<strong>and easy to do anywhere, even with Node.js</strong>'\n  };\n  sgMail.send(msg).then(() => {\n    console.log('Email sent');\n  }).catch(error => {\n    console.error(error);\n  });\n  return redirect('?sign-up=success');\n}",
      "start": 1668223188128,
      "end": 1668223188133
    }
  ],
  "virtual": false
}